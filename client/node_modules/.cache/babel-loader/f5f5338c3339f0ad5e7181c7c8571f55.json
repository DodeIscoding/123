{"ast":null,"code":"var _jsxFileName = \"/home/leegenho/123/Node_server/client/src/components/views/Page/test.js\",\n    _s = $RefreshSig$();\n\n/* global kakao */\nimport React, { useEffect, useState } from \"react\";\nimport cn from \"classnames\";\nimport \"../html/KakaoMap.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nconst Map = () => {\n  _s();\n\n  const [state, setState] = useState({\n    // 지도의 초기 위치\n    center: {\n      lat: 37.49676871972202,\n      lng: 127.02474726969814\n    },\n    // 지도 위치 변경시 panto를 이용할지(부드럽게 이동)\n    isPanto: true\n  });\n  const [searchAddress, SetSearchAddress] = useState(); // 주소 입력후 검색 클릭 시 원하는 주소로 이동\n\n  const SearchMap = () => {\n    const geocoder = new kakao.maps.services.Geocoder();\n\n    let callback = function (result, status) {\n      if (status === kakao.maps.services.Status.OK) {\n        const newSearch = result[0];\n        setState({\n          center: {\n            lat: newSearch.y,\n            lng: newSearch.x\n          }\n        });\n      }\n    };\n\n    geocoder.addressSearch(`${searchAddress}`, callback);\n  };\n\n  const handleSearchAddress = e => {\n    SetSearchAddress(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n  , {\n    center: state.center,\n    isPanto: state.isPanto,\n    style: {\n      // 지도의 크기\n      width: \"100%\",\n      height: \"450px\"\n    },\n    level: 3 // 지도의 확대 레벨\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleSearchAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: SearchMap,\n        children: \"\\uD074\\uB9AD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Map, \"IYGaJGji6iM94STPXXOV8kl8PPg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","cn","kakao","window","Map","state","setState","center","lat","lng","isPanto","searchAddress","SetSearchAddress","SearchMap","geocoder","maps","services","Geocoder","callback","result","status","Status","OK","newSearch","y","x","addressSearch","handleSearchAddress","e","target","value","width","height"],"sources":["/home/leegenho/123/Node_server/client/src/components/views/Page/test.js"],"sourcesContent":["/* global kakao */\nimport React, { useEffect,useState } from \"react\";\nimport cn from \"classnames\";\nimport \"../html/KakaoMap.css\";\n\nconst { kakao } = window;\nconst Map = () => {\n    \n    const [state, setState] = useState({\n        // 지도의 초기 위치\n        center: { lat: 37.49676871972202, lng: 127.02474726969814 },\n        // 지도 위치 변경시 panto를 이용할지(부드럽게 이동)\n        isPanto: true,\n      });\n      const [searchAddress, SetSearchAddress] = useState();\n      \n      // 주소 입력후 검색 클릭 시 원하는 주소로 이동\n      const SearchMap = () => {\n        const geocoder = new kakao.maps.services.Geocoder();\n        \n        let callback = function(result, status) {\n          if (status === kakao.maps.services.Status.OK) {\n            const newSearch = result[0]\n            setState({\n              center: { lat: newSearch.y, lng: newSearch.x }\n            })\n          }\n        };\n          geocoder.addressSearch(`${searchAddress}`, callback);\n        }\n      \n      const handleSearchAddress = (e) => {\n        SetSearchAddress(e.target.value)\n      }\n      \n\n  return (\n<Map // 지도를 표시할 Container\n  center={state.center}\n  isPanto={state.isPanto}\n  style={{\n       // 지도의 크기\n       width: \"100%\",\n       height: \"450px\",\n      }}\n      level={3} // 지도의 확대 레벨\n      ><div>\n      <input onChange={handleSearchAddress}></input>\n      <button onClick={SearchMap}>클릭</button>\n    </div></Map>\n      \n      \n\n  );\n};\n\nexport default Map;"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAO,sBAAP;;AAEA,MAAM;EAAEC;AAAF,IAAYC,MAAlB;;AACA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAEd,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;IAC/B;IACAO,MAAM,EAAE;MAAEC,GAAG,EAAE,iBAAP;MAA0BC,GAAG,EAAE;IAA/B,CAFuB;IAG/B;IACAC,OAAO,EAAE;EAJsB,CAAD,CAAlC;EAME,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,EAAlD,CARY,CAUZ;;EACA,MAAMa,SAAS,GAAG,MAAM;IACtB,MAAMC,QAAQ,GAAG,IAAIZ,KAAK,CAACa,IAAN,CAAWC,QAAX,CAAoBC,QAAxB,EAAjB;;IAEA,IAAIC,QAAQ,GAAG,UAASC,MAAT,EAAiBC,MAAjB,EAAyB;MACtC,IAAIA,MAAM,KAAKlB,KAAK,CAACa,IAAN,CAAWC,QAAX,CAAoBK,MAApB,CAA2BC,EAA1C,EAA8C;QAC5C,MAAMC,SAAS,GAAGJ,MAAM,CAAC,CAAD,CAAxB;QACAb,QAAQ,CAAC;UACPC,MAAM,EAAE;YAAEC,GAAG,EAAEe,SAAS,CAACC,CAAjB;YAAoBf,GAAG,EAAEc,SAAS,CAACE;UAAnC;QADD,CAAD,CAAR;MAGD;IACF,CAPD;;IAQEX,QAAQ,CAACY,aAAT,CAAwB,GAAEf,aAAc,EAAxC,EAA2CO,QAA3C;EACD,CAZH;;EAcA,MAAMS,mBAAmB,GAAIC,CAAD,IAAO;IACjChB,gBAAgB,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;EACD,CAFD;;EAKJ,oBACF,QAAC,GAAD,CAAK;EAAL;IACE,MAAM,EAAEzB,KAAK,CAACE,MADhB;IAEE,OAAO,EAAEF,KAAK,CAACK,OAFjB;IAGE,KAAK,EAAE;MACF;MACAqB,KAAK,EAAE,MAFL;MAGFC,MAAM,EAAE;IAHN,CAHT;IAQM,KAAK,EAAE,CARb,CAQgB;IARhB;IAAA,uBASO;MAAA,wBACD;QAAO,QAAQ,EAAEL;MAAjB;QAAA;QAAA;QAAA;MAAA,QADC,eAED;QAAQ,OAAO,EAAEd,SAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFC;IAAA;MAAA;MAAA;MAAA;IAAA;EATP;IAAA;IAAA;IAAA;EAAA,QADE;AAkBD,CAhDD;;GAAMT,G;;KAAAA,G;AAkDN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}